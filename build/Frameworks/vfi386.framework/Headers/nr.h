#ifndef _NR_H_#define _NR_H_#include <fstream>#include <complex>#include "nrutil_nr.h"#include "nrtypes_nr.h"#include "rc_types.h"using namespace std;namespace NR {void covsrt(Mat_IO_DP &covar, Vec_I_BOOL &ia, const int mfit); void fgauss(const DP x, Vec_I_DP &a, DP &y, Vec_O_DP &dyda); void fexponential (const DP x, Vec_I_DP &a, DP &y, Vec_O_DP &dyda); void fgaussPlusExp (const DP x, Vec_I_DP &a, DP &y, Vec_O_DP &dyda);void gaussj(Mat_IO_DP &a, Mat_IO_DP &b);void mrqcof(Vec_I_DP &x, Vec_I_DP &y, Vec_I_DP &sig, Vec_I_DP &a,	Vec_I_BOOL &ia, Mat_O_DP &alpha, Vec_O_DP &beta, DP &chisq,	void funcs(const DP, Vec_I_DP &,DP &, Vec_O_DP &));void mrqmin(Vec_I_DP &x, Vec_I_DP &y, Vec_I_DP &sig, Vec_IO_DP &a,	Vec_I_BOOL &ia, Mat_O_DP &covar, Mat_O_DP &alpha, DP &chisq,	void funcs(const DP, Vec_I_DP &, DP &, Vec_O_DP &), DP &alamda);DP ran1(int &idum);DP gasdev(int &idum);void svbksb(Mat_I_DP &u, Vec_I_DP &w, Mat_I_DP &v, Vec_I_DP &b, Vec_O_DP &x);void svdfit(Vec_I_DP &x, Vec_I_DP &y, Vec_I_DP &sig, Vec_O_DP &a,		Mat_O_DP &u, Mat_O_DP &v, Vec_O_DP &w, DP &chisq,		void funcs(const DP, Vec_O_DP &)); void svdvar(Mat_I_DP &v, Vec_I_DP &w, Mat_O_DP &cvm); void fleg(const DP x, Vec_O_DP &pl);void svdcmp(Mat_IO_DP &a, Vec_O_DP &w, Mat_O_DP &v);void fpoly(const DP x, Vec_O_DP &p);DP plgndr(const int l, const int m, const DP x);// DP pythag(const DP a, const DP b);  void realft(Vec_IO_DP &data, const int isign);  void four1(Vec_IO_DP &data, const int isign);void convlv(Vec_I_DP &data, Vec_I_DP &respns, const int isign,		Vec_O_DP &ans);void savgol(Vec_O_DP &c, const int np, const int nl, const int nr,		const int ld, const int m);  void lubksb(Mat_I_DP &a, Vec_I_INT &indx, Vec_IO_DP &b);  void ludcmp(Mat_IO_DP &a, Vec_O_INT &indx, DP &d);void period(Vec_I_DP &x, Vec_I_DP &y, const DP ofac, const DP hifac,	    Vec_O_DP &px, Vec_O_DP &py, int &nout, int &jmax, DP &prob);void fasper(Vec_I_DP &x, Vec_I_DP &y, const DP ofac, const DP hifac,	    Vec_O_DP &wk1, Vec_O_DP &wk2, int &nout, int &jmax, DP &prob); void avevar(Vec_I_DP &data, DP &ave, DP &var); void spread(const DP y, Vec_IO_DP &yy, const DP x, const int m);  void polint(Vec_I_DP &xa, Vec_I_DP &ya, const DP x, DP &y, DP &dy);}#endif /* _NR_H_ */