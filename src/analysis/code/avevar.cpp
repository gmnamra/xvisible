#include "nr.h"void NR::avevar(Vec_I_DP &data, DP &ave, DP &var){	DP s,ep;	int j;	int n=data.size();	ave=0.0;	for (j=0;j<n;j++) ave += data[j];	ave /= n;	var=ep=0.0;	for (j=0;j<n;j++) {		s=data[j]-ave;		ep += s;		var += s*s;	}	var=(var-ep*ep/n)/(n-1);}void NR::spread(const DP y, Vec_IO_DP &yy, const DP x, const int m){	static int nfac[11]={0,1,1,2,6,24,120,720,5040,40320,362880};	int ihi,ilo,ix,j,nden;	DP fac;	int n=yy.size();	if (m > 10) nrerror("factorial table too small in spread");	ix=int(x);	if (x == DP(ix)) yy[ix-1] += y;	else {		ilo=MIN(MAX(int(x-0.5*m),0),int(n-m));		ihi=ilo+m;		nden=nfac[m];		fac=x-ilo-1;		for (j=ilo+1;j<ihi;j++) fac *= (x-j-1);		yy[ihi-1] += y*fac/(nden*(x-ihi));		for (j=ihi-1;j>ilo;j--) {			nden=(nden/(j-ilo))*(j-ihi);			yy[j-1] += y*fac/(nden*(x-j));		}	}}